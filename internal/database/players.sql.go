// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: players.sql

package database

import (
	"context"
	"database/sql"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO player(name,gender,age,total_pizza,logged_pizza,coins,date_created) VALUES($1,$2,$3,$4,$5,$6,$7) RETURNING id, name, gender, age, total_pizza, logged_pizza, coins, date_created
`

type CreatePlayerParams struct {
	Name        sql.NullString
	Gender      sql.NullString
	Age         sql.NullInt32
	TotalPizza  sql.NullInt32
	LoggedPizza sql.NullInt32
	Coins       sql.NullInt32
	DateCreated sql.NullTime
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer,
		arg.Name,
		arg.Gender,
		arg.Age,
		arg.TotalPizza,
		arg.LoggedPizza,
		arg.Coins,
		arg.DateCreated,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Gender,
		&i.Age,
		&i.TotalPizza,
		&i.LoggedPizza,
		&i.Coins,
		&i.DateCreated,
	)
	return i, err
}

const getPlayers = `-- name: GetPlayers :many
SELECT id, name, gender, age, total_pizza, logged_pizza, coins, date_created FROM player
`

func (q *Queries) GetPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Gender,
			&i.Age,
			&i.TotalPizza,
			&i.LoggedPizza,
			&i.Coins,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
